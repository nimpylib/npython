#!/usr/bin/env python3
## this file is also runnable via Python
##  and it should be run via python for one time when it's time to test to update

"""\""".`!=`("").assert
import ./rune_decl
import ./[decimal, space]
import ./private/consts
when true:
  template range(a, b: int): untyped = a..<b
  template range(n: int): untyped = range(0, n)
  type C = Rune
  template append[T](s: seq[T]; i: T) = s.add i
  from std/strutils import join
  template `$`[T](s: seq[T]): string = '[' & s.join", " & ']'
  type IntSeq = seq[int]
  var
    PRE, SEP: string
    spaces: IntSeq
    digits: array[10, IntSeq]
    c: Rune
    d: int
discard "" != """"_"""

#[
from sys import maxunicode
from unicodedata import decimal, unidata_version
if 1:
  def echo(*a): print(*a, sep="")
  C = chr
  spaces = []
  #digits = [[] for _ in range(10)]
  digits = []
  for _ in range(10): digits.append([])
[
]#

PRE = "const "
# PRE must be suffixed with token sep (often an space), iff not empty
SEP = "* = "

for i in range(maxunicode+1):
  c = C(i)
  if c.isspace(): spaces.append(i)
  d = decimal(c, -1)
  if d < 0: continue
  digits[d].append(i)

echo("# Generated by test_decimalAndSpace")
echo(PRE, "unidata_version", SEP, '"', unidata_version, '"')
echo(PRE, "maxunicode", SEP, maxunicode)
echo(PRE, "spaces", SEP, spaces)
for i in range(68):
  for j in range(9):
    assert digits[j][i]+1 == digits[j+1][i]

echo(PRE, "allZeros", SEP, digits[0])

